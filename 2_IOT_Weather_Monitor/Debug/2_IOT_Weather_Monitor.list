
2_IOT_Weather_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f68  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001100  08001100  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001100  08001100  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  08001100  08001100  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001100  08001100  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001100  08001100  00011100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001104  08001104  00011104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08001108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000158  08001260  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08001260  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d05  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000041b  00000000  00000000  00020e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  000212a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  000213c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e7fb  00000000  00000000  000214a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001467  00000000  00000000  0002fc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00052e05  00000000  00000000  00031102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00083f07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000434  00000000  00000000  00083f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000158 	.word	0x20000158
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080010e8 	.word	0x080010e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000015c 	.word	0x2000015c
 80001d4:	080010e8 	.word	0x080010e8

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <DHT11_config>:
void delay_for_usec(int unit);

unsigned char dht11_data[8];    //new change

void DHT11_config()
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	/*Configuring PA12 as GPIO for receiving data this steps are just before
	 * initialization of sensor as of datasheet*/
	/*Enabling clock to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <DHT11_config+0x2c>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <DHT11_config+0x2c>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Configuring mode to output*/
	gpio_output_mode();
 80009d4:	f000 f89e 	bl	8000b14 <gpio_output_mode>

	/*setting output high*/
	GPIOA->ODR |= DHT11EN;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <DHT11_config+0x30>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <DHT11_config+0x30>)
 80009de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e2:	6153      	str	r3, [r2, #20]

	/*giving a delay before initialization starts*/
	delay_for_msec(100);
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f000 f8bd 	bl	8000b64 <delay_for_msec>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000

080009f8 <DHT11_init>:

void DHT11_init()
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
	unsigned char a = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	71fb      	strb	r3, [r7, #7]
	gpio_output_mode();
 8000a02:	f000 f887 	bl	8000b14 <gpio_output_mode>
	GPIOA->ODR |=  DHT11EN;   //setting high
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <DHT11_init+0x98>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <DHT11_init+0x98>)
 8000a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a10:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~DHT11EN;  //clearing to low
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <DHT11_init+0x98>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <DHT11_init+0x98>)
 8000a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a1c:	6153      	str	r3, [r2, #20]
	delay_for_msec(27);      //minimum 18ms so giving 25ms
 8000a1e:	201b      	movs	r0, #27
 8000a20:	f000 f8a0 	bl	8000b64 <delay_for_msec>
	//value given based on logic analyzer

	GPIOA->ODR |= DHT11EN;   //setting high
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <DHT11_init+0x98>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <DHT11_init+0x98>)
 8000a2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a2e:	6153      	str	r3, [r2, #20]
	gpio_input_mode();      //changing to input
 8000a30:	f000 f884 	bl	8000b3c <gpio_input_mode>

	/*Checking whether high, if yes stays there, because sensor doesn't respond
	 * with a low*/
	while(((GPIOA->IDR>>DHT11) & 1)==1);
 8000a34:	bf00      	nop
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <DHT11_init+0x98>)
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	0b1b      	lsrs	r3, r3, #12
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d0f8      	beq.n	8000a36 <DHT11_init+0x3e>
	/*now the low came means sensor responding (54us low)*/
	while(((GPIOA->IDR>>DHT11) & 1)==0);
 8000a44:	bf00      	nop
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <DHT11_init+0x98>)
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	0b1b      	lsrs	r3, r3, #12
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f8      	beq.n	8000a46 <DHT11_init+0x4e>
	/*now the high came means sensor responding (80us high)*/
	while(((GPIOA->IDR>>DHT11) & 1)==1);
 8000a54:	bf00      	nop
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <DHT11_init+0x98>)
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	0b1b      	lsrs	r3, r3, #12
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d0f8      	beq.n	8000a56 <DHT11_init+0x5e>
	/*from now on sensor will be sending data with MSB first*/

	/*Receiving 5 bytes*/
	for(a=0;a<=4;a++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	e009      	b.n	8000a7e <DHT11_init+0x86>
	{

		dht11_data[a] = receive_bytes();
 8000a6a:	79fc      	ldrb	r4, [r7, #7]
 8000a6c:	f000 f814 	bl	8000a98 <receive_bytes>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <DHT11_init+0x9c>)
 8000a76:	551a      	strb	r2, [r3, r4]
	for(a=0;a<=4;a++)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d9f2      	bls.n	8000a6a <DHT11_init+0x72>
	}


}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd90      	pop	{r4, r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020000 	.word	0x40020000
 8000a94:	20000174 	.word	0x20000174

08000a98 <receive_bytes>:

unsigned char receive_bytes(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	unsigned char a = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	unsigned char out;
	for(a=0; a<8; a++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	e02b      	b.n	8000b00 <receive_bytes+0x68>
	{
		/*from here on the data started coming*/
		/*waiting for the 54us low part of sensor clear out*/
		while(((GPIOA->IDR>>DHT11) & 1)==0);
 8000aa8:	bf00      	nop
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <receive_bytes+0x78>)
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	0b1b      	lsrs	r3, r3, #12
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0f8      	beq.n	8000aaa <receive_bytes+0x12>

		/*Giving a delay of 35us for the high part which may be 24us or 70us*/
		delay_for_usec(27); //value given based on logic analyzer
 8000ab8:	201b      	movs	r0, #27
 8000aba:	f000 f873 	bl	8000ba4 <delay_for_usec>

		/*Checking if still its high after 35us then it will be given a value of 1
		 * and assign it to out variable*/
		if(((GPIOA->IDR>>DHT11) & 1)==1)
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <receive_bytes+0x78>)
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	0b1b      	lsrs	r3, r3, #12
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d107      	bne.n	8000adc <receive_bytes+0x44>
		{
			out |= (1U<<0);
 8000acc:	79bb      	ldrb	r3, [r7, #6]
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	71bb      	strb	r3, [r7, #6]
			out = out<<1;
 8000ad4:	79bb      	ldrb	r3, [r7, #6]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	71bb      	strb	r3, [r7, #6]
 8000ada:	e006      	b.n	8000aea <receive_bytes+0x52>
		}
		else
		{
			out &= ~(1U<<0);
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	f023 0301 	bic.w	r3, r3, #1
 8000ae2:	71bb      	strb	r3, [r7, #6]
			out = out<<1;
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	71bb      	strb	r3, [r7, #6]
		}
		/*Waiting to be cleared out any remaining high part*/
		while(((GPIOA->IDR>>DHT11) & 1)==0);
 8000aea:	bf00      	nop
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <receive_bytes+0x78>)
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	0b1b      	lsrs	r3, r3, #12
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f8      	beq.n	8000aec <receive_bytes+0x54>
	for(a=0; a<8; a++)
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	3301      	adds	r3, #1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	d9d0      	bls.n	8000aa8 <receive_bytes+0x10>

	}
	return out;
 8000b06:	79bb      	ldrb	r3, [r7, #6]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40020000 	.word	0x40020000

08000b14 <gpio_output_mode>:

void gpio_output_mode(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	/*Configuring mode to output*/
	GPIOA->MODER |=  (1U<<24);
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <gpio_output_mode+0x24>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <gpio_output_mode+0x24>)
 8000b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b22:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<25);
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <gpio_output_mode+0x24>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <gpio_output_mode+0x24>)
 8000b2a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	40020000 	.word	0x40020000

08000b3c <gpio_input_mode>:

void gpio_input_mode(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	/*Configuring mode to output*/
	GPIOA->MODER &= ~(1U<<24);
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <gpio_input_mode+0x24>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <gpio_input_mode+0x24>)
 8000b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b4a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<25);
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <gpio_input_mode+0x24>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <gpio_input_mode+0x24>)
 8000b52:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40020000 	.word	0x40020000

08000b64 <delay_for_msec>:

void delay_for_msec(int unit)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	for(int i=0; i<unit; i++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	e00d      	b.n	8000b8e <delay_for_msec+0x2a>
	{
		for(int j=0; j<1334; j++);
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	e002      	b.n	8000b7e <delay_for_msec+0x1a>
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	f240 5235 	movw	r2, #1333	; 0x535
 8000b84:	4293      	cmp	r3, r2
 8000b86:	ddf7      	ble.n	8000b78 <delay_for_msec+0x14>
	for(int i=0; i<unit; i++)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	dbed      	blt.n	8000b72 <delay_for_msec+0xe>
	}
}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
	...

08000ba4 <delay_for_usec>:

void delay_for_usec(int unit)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	int change = unit/3;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <delay_for_usec+0x48>)
 8000bb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb4:	17db      	asrs	r3, r3, #31
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<change; i++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e00b      	b.n	8000bd8 <delay_for_usec+0x34>
	{
		for(int j=0; j<4; j++);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	e002      	b.n	8000bcc <delay_for_usec+0x28>
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	ddf9      	ble.n	8000bc6 <delay_for_usec+0x22>
	for(int i=0; i<change; i++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbef      	blt.n	8000bc0 <delay_for_usec+0x1c>
	}
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	55555556 	.word	0x55555556

08000bf0 <main>:
void Init_ESP8266(void);
void Wifi_acc(void);
void Data_Commands(void);

int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

	uart_rx_tx_init();
 8000bf4:	f000 f960 	bl	8000eb8 <uart_rx_tx_init>
	DHT11_config();
 8000bf8:	f7ff fee4 	bl	80009c4 <DHT11_config>
		Init_ESP8266();
 8000bfc:	f000 f906 	bl	8000e0c <Init_ESP8266>
		Wifi_acc();
 8000c00:	f000 f910 	bl	8000e24 <Wifi_acc>
	    Thing_Speak_Command_Start();
 8000c04:	f000 f8f4 	bl	8000df0 <Thing_Speak_Command_Start>
		delay_for_msec(500);
 8000c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c0c:	f7ff ffaa 	bl	8000b64 <delay_for_msec>
		while(1)
		{
			DHT11_init();
 8000c10:	f7ff fef2 	bl	80009f8 <DHT11_init>
			dht11_data[0] = dht11_data[0]/1.60;
 8000c14:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <main+0xd8>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc37 	bl	800048c <__aeabi_i2d>
 8000c1e:	a326      	add	r3, pc, #152	; (adr r3, 8000cb8 <main+0xc8>)
 8000c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c24:	f7ff fdc6 	bl	80007b4 <__aeabi_ddiv>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f7ff fea8 	bl	8000984 <__aeabi_d2uiz>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <main+0xd8>)
 8000c3a:	701a      	strb	r2, [r3, #0]
			integer_to_ascii(dht11_data[0],data_string_1);
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <main+0xd8>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4922      	ldr	r1, [pc, #136]	; (8000ccc <main+0xdc>)
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f848 	bl	8000cd8 <integer_to_ascii>
			dht11_data[2] = dht11_data[2]/2.05;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <main+0xd8>)
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fc1d 	bl	800048c <__aeabi_i2d>
 8000c52:	a31b      	add	r3, pc, #108	; (adr r3, 8000cc0 <main+0xd0>)
 8000c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c58:	f7ff fdac 	bl	80007b4 <__aeabi_ddiv>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f7ff fe8e 	bl	8000984 <__aeabi_d2uiz>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <main+0xd8>)
 8000c6e:	709a      	strb	r2, [r3, #2]
			integer_to_ascii(dht11_data[2],data_string_2);
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <main+0xd8>)
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	4916      	ldr	r1, [pc, #88]	; (8000cd0 <main+0xe0>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f82e 	bl	8000cd8 <integer_to_ascii>
			Data_Commands();
 8000c7c:	f000 f8e0 	bl	8000e40 <Data_Commands>
			uart_send_string(display);
 8000c80:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <main+0xe4>)
 8000c82:	f000 f9a1 	bl	8000fc8 <uart_send_string>
			uart_send_string(data_string_1);
 8000c86:	4811      	ldr	r0, [pc, #68]	; (8000ccc <main+0xdc>)
 8000c88:	f000 f99e 	bl	8000fc8 <uart_send_string>
			uart_write('\t');
 8000c8c:	2009      	movs	r0, #9
 8000c8e:	f000 f985 	bl	8000f9c <uart_write>
			uart_write('\t');
 8000c92:	2009      	movs	r0, #9
 8000c94:	f000 f982 	bl	8000f9c <uart_write>
			uart_send_string(data_string_2);
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <main+0xe0>)
 8000c9a:	f000 f995 	bl	8000fc8 <uart_send_string>
			uart_write('\r');
 8000c9e:	200d      	movs	r0, #13
 8000ca0:	f000 f97c 	bl	8000f9c <uart_write>
			uart_write('\n');
 8000ca4:	200a      	movs	r0, #10
 8000ca6:	f000 f979 	bl	8000f9c <uart_write>
			delay_for_msec(10000);
 8000caa:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cae:	f7ff ff59 	bl	8000b64 <delay_for_msec>
			DHT11_init();
 8000cb2:	e7ad      	b.n	8000c10 <main+0x20>
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	9999999a 	.word	0x9999999a
 8000cbc:	3ff99999 	.word	0x3ff99999
 8000cc0:	66666666 	.word	0x66666666
 8000cc4:	40006666 	.word	0x40006666
 8000cc8:	20000174 	.word	0x20000174
 8000ccc:	2000017c 	.word	0x2000017c
 8000cd0:	20000184 	.word	0x20000184
 8000cd4:	20000138 	.word	0x20000138

08000cd8 <integer_to_ascii>:




void integer_to_ascii(unsigned char Val, unsigned char *str)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  str[0] = Val/1000 + 0x30;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4a29      	ldr	r2, [pc, #164]	; (8000d8c <integer_to_ascii+0xb4>)
 8000ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cec:	1192      	asrs	r2, r2, #6
 8000cee:	17db      	asrs	r3, r3, #31
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	3330      	adds	r3, #48	; 0x30
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	701a      	strb	r2, [r3, #0]
   Val   = Val%1000;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4a23      	ldr	r2, [pc, #140]	; (8000d8c <integer_to_ascii+0xb4>)
 8000d00:	fb82 1203 	smull	r1, r2, r2, r3
 8000d04:	1191      	asrs	r1, r2, #6
 8000d06:	17da      	asrs	r2, r3, #31
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d0e:	fb01 f202 	mul.w	r2, r1, r2
 8000d12:	1a9a      	subs	r2, r3, r2
 8000d14:	4613      	mov	r3, r2
 8000d16:	71fb      	strb	r3, [r7, #7]
	str[1] = Val/100 + 0x30;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <integer_to_ascii+0xb8>)
 8000d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d20:	095b      	lsrs	r3, r3, #5
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	3230      	adds	r2, #48	; 0x30
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	701a      	strb	r2, [r3, #0]
	 Val   = Val%100;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <integer_to_ascii+0xb8>)
 8000d32:	fba2 1203 	umull	r1, r2, r2, r3
 8000d36:	0952      	lsrs	r2, r2, #5
 8000d38:	2164      	movs	r1, #100	; 0x64
 8000d3a:	fb01 f202 	mul.w	r2, r1, r2
 8000d3e:	1a9b      	subs	r3, r3, r2
 8000d40:	71fb      	strb	r3, [r7, #7]
	str[2] = Val/10 + 0x30;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <integer_to_ascii+0xbc>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3302      	adds	r3, #2
 8000d52:	3230      	adds	r2, #48	; 0x30
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	701a      	strb	r2, [r3, #0]
	str[3] = Val%10 + 0x30;
 8000d58:	79fa      	ldrb	r2, [r7, #7]
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <integer_to_ascii+0xbc>)
 8000d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d60:	08d9      	lsrs	r1, r3, #3
 8000d62:	460b      	mov	r3, r1
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	3303      	adds	r3, #3
 8000d72:	3230      	adds	r2, #48	; 0x30
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	701a      	strb	r2, [r3, #0]
	str[4] = '\0';
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	10624dd3 	.word	0x10624dd3
 8000d90:	51eb851f 	.word	0x51eb851f
 8000d94:	cccccccd 	.word	0xcccccccd

08000d98 <Basic_Commands>:

/*AT commands*/
void Basic_Commands(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	uart_send_string(command_basic_1);
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <Basic_Commands+0x24>)
 8000d9e:	f000 f913 	bl	8000fc8 <uart_send_string>
	delay_for_msec(500);
 8000da2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da6:	f7ff fedd 	bl	8000b64 <delay_for_msec>
	uart_send_string(command_basic_2);
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <Basic_Commands+0x28>)
 8000dac:	f000 f90c 	bl	8000fc8 <uart_send_string>
	delay_for_msec(2000);
 8000db0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000db4:	f7ff fed6 	bl	8000b64 <delay_for_msec>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <Wifi_Conn_Commands>:

void Wifi_Conn_Commands(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	uart_send_string(command_ESP_1);
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <Wifi_Conn_Commands+0x24>)
 8000dca:	f000 f8fd 	bl	8000fc8 <uart_send_string>
	delay_for_msec(500);
 8000dce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd2:	f7ff fec7 	bl	8000b64 <delay_for_msec>
	uart_send_string(command_ESP_2);
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <Wifi_Conn_Commands+0x28>)
 8000dd8:	f000 f8f6 	bl	8000fc8 <uart_send_string>
	delay_for_msec(500);
 8000ddc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de0:	f7ff fec0 	bl	8000b64 <delay_for_msec>

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000014 	.word	0x20000014
 8000dec:	20000024 	.word	0x20000024

08000df0 <Thing_Speak_Command_Start>:

void Thing_Speak_Command_Start(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	uart_send_string(command_ESP_4);
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <Thing_Speak_Command_Start+0x18>)
 8000df6:	f000 f8e7 	bl	8000fc8 <uart_send_string>
	delay_for_msec(5000);
 8000dfa:	f241 3088 	movw	r0, #5000	; 0x1388
 8000dfe:	f7ff feb1 	bl	8000b64 <delay_for_msec>

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000034 	.word	0x20000034

08000e0c <Init_ESP8266>:

void Init_ESP8266(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	delay_for_msec(5000);
 8000e10:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e14:	f7ff fea6 	bl	8000b64 <delay_for_msec>
	Basic_Commands();
 8000e18:	f7ff ffbe 	bl	8000d98 <Basic_Commands>
	Wifi_Conn_Commands();
 8000e1c:	f7ff ffd2 	bl	8000dc4 <Wifi_Conn_Commands>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <Wifi_acc>:
void Wifi_acc(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	uart_send_string(command_ESP_3);
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <Wifi_acc+0x18>)
 8000e2a:	f000 f8cd 	bl	8000fc8 <uart_send_string>
  delay_for_msec(8000);
 8000e2e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000e32:	f7ff fe97 	bl	8000b64 <delay_for_msec>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000050 	.word	0x20000050

08000e40 <Data_Commands>:

void Data_Commands(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	uart_send_string(command_ESP_5);
 8000e44:	4814      	ldr	r0, [pc, #80]	; (8000e98 <Data_Commands+0x58>)
 8000e46:	f000 f8bf 	bl	8000fc8 <uart_send_string>
	delay_for_msec(5000);
 8000e4a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e4e:	f7ff fe89 	bl	8000b64 <delay_for_msec>
	uart_send_string(command_ESP_6);
 8000e52:	4812      	ldr	r0, [pc, #72]	; (8000e9c <Data_Commands+0x5c>)
 8000e54:	f000 f8b8 	bl	8000fc8 <uart_send_string>
    delay_for_msec(5000);
 8000e58:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e5c:	f7ff fe82 	bl	8000b64 <delay_for_msec>
	uart_send_string(command_ESP_7);
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Data_Commands+0x60>)
 8000e62:	f000 f8b1 	bl	8000fc8 <uart_send_string>
	uart_send_string(data_string_1);
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <Data_Commands+0x64>)
 8000e68:	f000 f8ae 	bl	8000fc8 <uart_send_string>
	uart_send_string(command_ESP_8);
 8000e6c:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <Data_Commands+0x68>)
 8000e6e:	f000 f8ab 	bl	8000fc8 <uart_send_string>
	uart_send_string(data_string_2);
 8000e72:	480e      	ldr	r0, [pc, #56]	; (8000eac <Data_Commands+0x6c>)
 8000e74:	f000 f8a8 	bl	8000fc8 <uart_send_string>
	uart_send_string(command_ESP_9);
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <Data_Commands+0x70>)
 8000e7a:	f000 f8a5 	bl	8000fc8 <uart_send_string>
	delay_for_msec(1000);
 8000e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e82:	f7ff fe6f 	bl	8000b64 <delay_for_msec>
	uart_send_string(command_ESP_10);
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <Data_Commands+0x74>)
 8000e88:	f000 f89e 	bl	8000fc8 <uart_send_string>
	delay_for_msec(5000);
 8000e8c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e90:	f7ff fe68 	bl	8000b64 <delay_for_msec>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000084 	.word	0x20000084
 8000e9c:	200000b8 	.word	0x200000b8
 8000ea0:	200000cc 	.word	0x200000cc
 8000ea4:	2000017c 	.word	0x2000017c
 8000ea8:	2000010c 	.word	0x2000010c
 8000eac:	20000184 	.word	0x20000184
 8000eb0:	20000118 	.word	0x20000118
 8000eb4:	20000124 	.word	0x20000124

08000eb8 <uart_rx_tx_init>:

char uart_read(void);


void uart_rx_tx_init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	/*Configuring the GPIOA PA9(TX) and PA10(RX)*/
	/*Enabling clock to GPIOA pins*/
	RCC->AHB1ENR |= GPIOAEN;
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <uart_rx_tx_init+0xd4>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <uart_rx_tx_init+0xd4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30

	/*selecting mode for GPIOA*/
	/*for pin PA9*/
	GPIOA->MODER &= ~(1U<<18);
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<19);
 8000ed4:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ede:	6013      	str	r3, [r2, #0]

	/*for pin PA10*/
	GPIOA->MODER &= ~(1U<<20);
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a2a      	ldr	r2, [pc, #168]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000ee6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000eea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<21);
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a27      	ldr	r2, [pc, #156]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000ef2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef6:	6013      	str	r3, [r2, #0]

	/*selecting the alternate function as UART*/
	/*for pin PA9*/
	GPIOA->AFR[1] |= (1U<<4);
 8000ef8:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<5);
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f0a:	f043 0320 	orr.w	r3, r3, #32
 8000f0e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<6);
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	4a1e      	ldr	r2, [pc, #120]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~(1U<<7);
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f26:	6253      	str	r3, [r2, #36]	; 0x24

	/*for pin PA10*/
	GPIOA->AFR[1] |= (1U<<8);
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<9);
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<10);
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~(1U<<11);
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <uart_rx_tx_init+0xd8>)
 8000f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f56:	6253      	str	r3, [r2, #36]	; 0x24
	/*********************************************/

	/*Configuring UART1 module*/
	/*Enabling clock of APB2 for uart1*/
	RCC->APB2ENR |= UART1EN;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <uart_rx_tx_init+0xd4>)
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <uart_rx_tx_init+0xd4>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6453      	str	r3, [r2, #68]	; 0x44

	/*Setting baud rate*/
	uart_set_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	490a      	ldr	r1, [pc, #40]	; (8000f94 <uart_rx_tx_init+0xdc>)
 8000f6a:	480b      	ldr	r0, [pc, #44]	; (8000f98 <uart_rx_tx_init+0xe0>)
 8000f6c:	f000 f849 	bl	8001002 <uart_set_baudrate>

	/*Setting transfer direction rx and tx*/
	USART1->CR1 |= UART1TE | UART1RE;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <uart_rx_tx_init+0xe0>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <uart_rx_tx_init+0xe0>)
 8000f76:	f043 030c 	orr.w	r3, r3, #12
 8000f7a:	60d3      	str	r3, [r2, #12]

	/*Enable UART module*/
	USART1->CR1 |= UART1UE;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <uart_rx_tx_init+0xe0>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <uart_rx_tx_init+0xe0>)
 8000f82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f86:	60d3      	str	r3, [r2, #12]

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	00f42400 	.word	0x00f42400
 8000f98:	40011000 	.word	0x40011000

08000f9c <uart_write>:

void uart_write(unsigned char ch)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	/*check whether transmit data register is empty*/
	while(!(USART1->SR & UART1_SR_TXE)){}
 8000fa6:	bf00      	nop
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <uart_write+0x28>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f9      	beq.n	8000fa8 <uart_write+0xc>

	/*writing to data register*/
	USART1->DR = (ch & 0xff);
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <uart_write+0x28>)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	6053      	str	r3, [r2, #4]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40011000 	.word	0x40011000

08000fc8 <uart_send_string>:
	/*return data in DR or read data*/
	 return USART1->DR;
}

void uart_send_string(unsigned char a[])
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<strlen((char*)a);i++)   //check this theory
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e009      	b.n	8000fea <uart_send_string+0x22>
	{
		uart_write(a[i]);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ffdc 	bl	8000f9c <uart_write>
	for(int i = 0; i<strlen((char*)a);i++)   //check this theory
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff f8f4 	bl	80001d8 <strlen>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8ee      	bhi.n	8000fd6 <uart_send_string+0xe>

	}
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <uart_set_baudrate>:
//}



void uart_set_baudrate(USART_TypeDef* USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_baudrate(PeriphClk, BaudRate);
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	68b8      	ldr	r0, [r7, #8]
 8001012:	f000 f808 	bl	8001026 <compute_uart_baudrate>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	609a      	str	r2, [r3, #8]
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <compute_uart_baudrate>:

static uint16_t compute_uart_baudrate(uint32_t PeriphClk, uint32_t BaudRate)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	085a      	lsrs	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	441a      	add	r2, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	b29b      	uxth	r3, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
	...

0800104c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001050:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <LoopForever+0x6>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <LoopForever+0xe>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <LoopForever+0x12>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	; (8001098 <LoopForever+0x16>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800107a:	f000 f811 	bl	80010a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107e:	f7ff fdb7 	bl	8000bf0 <main>

08001082 <LoopForever>:

LoopForever:
  b LoopForever
 8001082:	e7fe      	b.n	8001082 <LoopForever>
  ldr   r0, =_estack
 8001084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001090:	08001108 	.word	0x08001108
  ldr r2, =_sbss
 8001094:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001098:	2000018c 	.word	0x2000018c

0800109c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>
	...

080010a0 <__libc_init_array>:
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	4d0d      	ldr	r5, [pc, #52]	; (80010d8 <__libc_init_array+0x38>)
 80010a4:	4c0d      	ldr	r4, [pc, #52]	; (80010dc <__libc_init_array+0x3c>)
 80010a6:	1b64      	subs	r4, r4, r5
 80010a8:	10a4      	asrs	r4, r4, #2
 80010aa:	2600      	movs	r6, #0
 80010ac:	42a6      	cmp	r6, r4
 80010ae:	d109      	bne.n	80010c4 <__libc_init_array+0x24>
 80010b0:	4d0b      	ldr	r5, [pc, #44]	; (80010e0 <__libc_init_array+0x40>)
 80010b2:	4c0c      	ldr	r4, [pc, #48]	; (80010e4 <__libc_init_array+0x44>)
 80010b4:	f000 f818 	bl	80010e8 <_init>
 80010b8:	1b64      	subs	r4, r4, r5
 80010ba:	10a4      	asrs	r4, r4, #2
 80010bc:	2600      	movs	r6, #0
 80010be:	42a6      	cmp	r6, r4
 80010c0:	d105      	bne.n	80010ce <__libc_init_array+0x2e>
 80010c2:	bd70      	pop	{r4, r5, r6, pc}
 80010c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c8:	4798      	blx	r3
 80010ca:	3601      	adds	r6, #1
 80010cc:	e7ee      	b.n	80010ac <__libc_init_array+0xc>
 80010ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80010d2:	4798      	blx	r3
 80010d4:	3601      	adds	r6, #1
 80010d6:	e7f2      	b.n	80010be <__libc_init_array+0x1e>
 80010d8:	08001100 	.word	0x08001100
 80010dc:	08001100 	.word	0x08001100
 80010e0:	08001100 	.word	0x08001100
 80010e4:	08001104 	.word	0x08001104

080010e8 <_init>:
 80010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ea:	bf00      	nop
 80010ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ee:	bc08      	pop	{r3}
 80010f0:	469e      	mov	lr, r3
 80010f2:	4770      	bx	lr

080010f4 <_fini>:
 80010f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f6:	bf00      	nop
 80010f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fa:	bc08      	pop	{r3}
 80010fc:	469e      	mov	lr, r3
 80010fe:	4770      	bx	lr
